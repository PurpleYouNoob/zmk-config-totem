#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Esc {
            bindings = <&kp ESC>;
            key-positions = <11 10>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <13 12>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17>;
        };

        Windows {
            bindings = <&kp LEFT_WIN>;
            key-positions = <18 19>;
        };

        Bt_Disc0 {
            bindings = <&bt BT_DISC 0>;
            key-positions = <5 20>;
            layers = <3>;
        };

        BT_Disc1 {
            bindings = <&bt BT_DISC 1>;
            key-positions = <20 15>;
            layers = <3>;
        };

        BT_Disc2 {
            bindings = <&bt BT_DISC 2>;
            key-positions = <20 26>;
            layers = <3>;
        };

        BT_Disc3 {
            bindings = <&bt BT_DISC 3>;
            key-positions = <20 27>;
            layers = <3>;
        };

        BT_Disc4 {
            bindings = <&bt BT_DISC 4>;
            key-positions = <20 28>;
            layers = <3>;
        };
    };

    behaviors {
        accent_grave_aigu: accent_grave_aigu {
            compatible = "zmk,behavior-mod-morph";
            label = "ACCENT_GRAVE_AIGU";
            bindings = <&kp RA(LC(NUHS))>, <&kp RA(SQT)>;
            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        /* --- OS mode switch macros (mutually exclusive Win <-> Mac) --- */
        to_win_mode: to_win_mode {
            compatible = "zmk,behavior-macro";
            label = "TO_WIN_MODE";
            #binding-cells = <0>;
            /* Turn Mac OFF then Win ON (or just turn Win ON if none active). */
            bindings = <&tog 5>, <&tog 4>;
        };

        to_mac_mode: to_mac_mode {
            compatible = "zmk,behavior-macro";
            label = "TO_MAC_MODE";
            #binding-cells = <0>;
            /* Turn Win OFF then Mac ON (or just turn Mac ON if none active). */
            bindings = <&tog 4>, <&tog 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        /* 0 */
        base_layer {
            bindings = <
           &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y     &kp U       &kp I      &kp O      &kp P
           &kp A  &kp S  &kp D     &kp F  &kp G        &kp H     &kp J       &kp K      &kp L      &kp SEMI
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N     &kp LS(LT)  &kp M      &kp COMMA  &kp DOT   &kp DEL
                         &kp LALT  &mo 1  &kp SPACE    &kp BSPC  &mo 2       &kp LSHFT
            >;

            label = "Base";
        };

        /* 1 */
        nav_layer {
            bindings = <
           &none            &kp HOME   &kp UP    &kp END    &none        &kp FSLH      &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(QMARK)
           &kp PRINTSCREEN  &kp LEFT   &kp DOWN  &kp RIGHT  &none        &kp LS(RPAR)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp EQUAL
&kp LCTRL  &none            &kp PG_UP  &kp INS   &kp PG_DN  &none        &kp LS(GT)    &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RBRC)   &kp DEL
                                       &kp LALT  &mo 1      &kp SPACE    &kp BSPC      &mo 2         &kp LSHFT
            >;

            label = "Nav";
        };

        /* 2 */
        symb_layer {
            bindings = <
           &kp RBKT           &kp LS(PLUS)              &kp N3          &kp N4    &kp LS(RBRC)        &kp LS(M)      &kp N1     &kp RA(LC(N1))    &kp LC(RA(N2))             &kp RA(LC(N3))
           &kp NUBS           &kp LC(RA(LEFT_BRACKET))  &kp RA(LC(N9))  &kp N5    &kp LS(DOT)         &kp N8         &kp MINUS  &kp RA(LC(N0))    &kp RA(LC(RIGHT_BRACKET))  &kp LS(NUBS)
&kp LCTRL  &kp RA(LC(SLASH))  &kp EQUAL                 &kp LS(QMARK)   &kp FSLH  &kp RA(LC(NUBS))    &kp LC(RA(E))  &kp DOT    &kp LEFT_BRACKET  &kp LS(DQT)                &accent_grave_aigu  &kp DEL
                                                        &kp LALT        &mo 1     &kp SPACE           &kp BSPC       &mo 2      &kp LSHFT
            >;

            label = "Symbole";
        };

        /* 3 */
        fn_layer {
            bindings = <
           &kp F1   &kp F2   &kp F3    &kp F4  &kp F5         &bt BT_SEL 0  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_MUTE  &none
           &kp F6   &kp F7   &kp F8    &kp F9  &kp F10        &bt BT_SEL 1  &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT  &none
&kp LCTRL  &kp F11  &kp F12  &trans  &trans  &kp C_SLEEP    &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4      &none       &none  &bt BT_CLR
                             &kp LALT  &mo 1     &kp SPACE      &kp BSPC      &mo 2              &kp LSHFT
            >;

            label = "Fn/ Media";
        };

        /* 4 — WIN_MODE (flag layer; overlays only the OS switch key) */
        win_mode {
            label = "WIN_MODE";
            bindings = <
                &trans &trans &trans   &trans &trans         &trans &trans &trans &trans &trans
                &trans &trans &trans   &trans &trans         &trans &trans &trans &trans &trans
&trans          &trans &trans &trans   &to_mac_mode &trans    &trans &trans &trans &trans &trans &trans
                                   &trans &trans &trans       &trans &trans &trans
            >;
        };

        /* 5 — MAC_MODE (flag layer; overlays only the OS switch key) */
        mac_mode {
            label = "MAC_MODE";
            bindings = <
                &trans &trans &trans   &trans &trans         &trans &trans &trans &trans &trans
                &trans &trans &trans   &trans &trans         &trans &trans &trans &trans &trans
&trans          &trans &trans &trans   &to_win_mode &trans    &trans &trans &trans &trans &trans &trans
                                   &trans &trans &trans       &trans &trans &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        /* inchangé : Fn auto quand Nav ou Symb actifs */
        Layer_FN {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
