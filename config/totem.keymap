//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Esc {
            bindings = <&kp ESC>;
            key-positions = <13 12 11 10>;
        };


        Tab {
            bindings = <&kp TAB>;
            key-positions = <13 23>;
        };


        Enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18 19>;
        };


        Windows {
            bindings = <&kp LEFT_WIN>;
            key-positions = <16 17>;
        };
    };



    keymap {
        compatible = "zmk,keymap";

        base_layer {

            bindings = <
                &kp A  &kp Z  &kp E     &kp R  &kp T        &kp Y     &kp U        &kp I      &kp O     &kp P
                &kp Q  &kp S  &kp D     &kp F  &kp G        &kp H     &kp J        &kp K      &kp L     &kp M
                &kp LCTRL  &kp W  &kp X  &kp C     &kp V  &kp B        &kp N     &kp LS(DOT)  &kp COMMA  &kp SEMI  &kp COLON  &kp DEL
                &kp LALT  &mo 1  &kp SPACE    &kp BSPC  &mo 2        &kp LSHFT
                >;
            label = "Base";
        };

        nav_layer {
            bindings = <
                &none            &kp HOME   &kp UP    &kp END    &none        &kp EQUAL     &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(PLUS)
                &kp PRINTSCREEN  &kp LEFT   &kp DOWN  &kp RIGHT  &none        &kp LS(N0)    &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp MINUS
                &kp LCTRL  &none            &kp PG_UP  &kp INS   &kp PG_DN  &none        &kp LS(FSLH)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(STAR)  &kp DEL
                &kp LALT  &mo 1      &kp SPACE    &kp BSPC      &mo 2       &kp LSHFT
            >;
            label = "Nav";
        };

        symb_layer {
            bindings = <
                &kp DLLR   &kp LS(UNDER)  &kp DQT       &kp SQT    &kp LS(STAR)    &kp LS(QMARK)  &kp AMPS   &kp PIPE   &kp AT         &kp POUND
                &kp LT     &kp LBKT       &kp LBRC      &kp LPAR   &kp LS(FSLH)    &kp EXCL       &kp RPAR   &kp RBRC   &kp RBKT       &kp LS(GT)
                &kp LCTRL  &kp EQUAL  &kp MINUS      &kp LS(PLUS)  &kp EQUAL  &kp BSLH        &kp RALT E     &kp COLON  &kp CARET  &kp LS(PRCNT)  &kp RALT 2  &kp DEL
                &kp LALT      &mo 1      &kp SPACE       &kp BSPC       &mo 2      &kp LSHFT
            >;
            label = "Symbole";
        };

        fn_layer {
            bindings = <
                &kp F1   &kp F2   &kp F3    &kp F4  &kp F5         &bt BT_SEL 0  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp K_MUTE  &none
                &kp F6   &kp F7   &kp F8    &kp F9  &kp F10        &bt BT_SEL 1  &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT  &none
                &kp LCTRL  &kp F11  &kp F12  &none     &none   &kp C_SLEEP    &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4      &none       &none  &bt BT_CLR
                &kp LALT  &mo 1   &kp SPACE      &kp BSPC      &mo 2              &kp LSHFT
                >;
            label = "Fn/ Media";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Layer_FN {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};